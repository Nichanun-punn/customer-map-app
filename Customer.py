import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import polyline
from geopy.distance import geodesic
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import time
import base64
import requests

# ------------------------ Header ‡πÅ‡∏ö‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å URL GitHub
st.markdown(f"""
    <style>
    .fixed-header {{
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 9999;
        background-color: white;
        padding: 10px 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }}
    .fixed-header-content {{
        display: flex;
        justify-content: center;
        align-items: center;
    }}
    .fixed-header-content img {{
        height: 50px;
    }}
    .spacer {{
        height: 1px;
    }}
    </style>

    <div class="fixed-header">
        <div class="fixed-header-content">
             <img src="https://raw.githubusercontent.com/Nichanun-punn/customer-map-app/main/logo.png" height="50">
        </div>
    </div>
    <div class="spacer"></div>
""", unsafe_allow_html=True)

# ---------------- CONFIG ---------------- #
st.set_page_config(page_title="Customer Map Planner", layout="wide")
st.sidebar.markdown("""
    <div style='
        text-align: center;
        font-size: 20px;
        font-weight: bold;
        background-color: #DDE5F0;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 15px;
    '>
        MENU
    </div>
""", unsafe_allow_html=True)

page = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", ["üìç ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"])

factory_latlon = (13.543372, 100.663351)

#------------------------------------DATA-----------------------------------------------#
DATA_PATH = "Class.csv" 

df = pd.read_csv(DATA_PATH)


# ------------------------------------------------------------------------------- CACHE -------------------------------------------- #
@st.cache_data
def get_osrm_route(start, end, retries=3, timeout=10):
    base_url = "https://router.project-osrm.org"
    url = f"{base_url}/route/v1/driving/{start[1]},{start[0]};{end[1]},{end[0]}?overview=full"

    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=timeout)
            if response.status_code == 200:
                data = response.json()
                coords = polyline.decode(data['routes'][0]['geometry'])
                distance_km = data['routes'][0]['distance'] / 1000
                return coords, distance_km
            else:
                st.warning(f"OSRM API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {response.status_code}")
                return [], 0
        except requests.exceptions.Timeout:
            st.warning(f"‚ùó Timeout ({attempt+1}/{retries}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OSRM: {e}")
            return [], 0
    st.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OSRM API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return [], 0

@st.cache_data
def compute_clusters(df):
    features = df[['Lat', 'Long']].copy()
    best_k = 0
    best_score = -1
    best_model = None
    for k in range(2, min(len(df), 200)):
        model = KMeans(n_clusters=k, random_state=42)
        labels = model.fit_predict(features)
        score = silhouette_score(features, labels)
        if score > best_score:
            best_k = k
            best_score = score
            best_model = model
    df['Cluster'] = best_model.predict(features)
    return df

df = compute_clusters(df)

# --------------------------------------------------------------------------------MAP---------------------------------------- #
if page == "üìç ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤":
    st.title("üìç Customer Mapping & Route Planning")

    col1, col2 = st.columns([2, 2])

    with col2:
        st.subheader("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
        tile_option = st.selectbox("üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", [
            '‚òÄÔ∏è ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (Positron)',
            'üåô ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (Dark Matter)',
            'üåç ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (OSM)'
        ])
        customer_option = st.selectbox("üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", ['-- Show All Customers --'] + df['Name'].tolist())

    selected_name = None if customer_option == '-- Show All Customers --' else customer_option
    if selected_name not in df['Name'].values:
        selected_name = None

    highlight_name = None
    dist1 = dist2 = 0
    route_order = None

    def plot_map(selected_name=None, tile='CartoDB positron', nearby_highlight=None):
        global dist1, dist2, route_order

        from folium.plugins import Fullscreen
        m = folium.Map(location=[df['Lat'].mean(), df['Long'].mean()], zoom_start=10, tiles={
            '‚òÄÔ∏è ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (Positron)': 'CartoDB positron',
            'üåô ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (Dark Matter)': 'CartoDB dark_matter',
            'üåç ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (OSM)': 'OpenStreetMap'
        }[tile])
        Fullscreen(position='topright').add_to(m)

        folium.Marker(factory_latlon, popup="üè† Factory", icon=folium.Icon(color='blue')).add_to(m)
        bounds = []
        total_distance_km = 0

        if selected_name:
            selected = df[df['Name'] == selected_name].iloc[0]
            dest_latlon = (selected['Lat'], selected['Long'])
            folium.Marker(dest_latlon,
                        popup=f"üìç {selected_name}<br>Class: {selected['Class']}",
                        icon=folium.Icon(color='red')).add_to(m)

            cluster_members = df[(df['Cluster'] == selected['Cluster']) & (df['Name'] != selected_name)].copy()

            if cluster_members.empty:
                st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå")
                nearest_df = pd.DataFrame(columns=['Name', 'Class', 'Distance_km'])
            else:
                cluster_members['Distance_km'] = cluster_members.apply(
                    lambda row: geodesic(dest_latlon, (row['Lat'], row['Long'])).km, axis=1)
                nearest_df = cluster_members.sort_values('Distance_km')

                for _, row in nearest_df.iterrows():
                    latlon = (row['Lat'], row['Long'])
                    color = 'green' if row['Name'] == nearby_highlight else 'gray'
                    popup = f"üìç {row['Name']}<br>Class: {row['Class']}"
                    folium.Marker(latlon, popup=popup, icon=folium.Icon(color=color)).add_to(m)

            if nearby_highlight:
                highlight_row = nearest_df[nearest_df['Name'] == nearby_highlight].iloc[0]
                highlight_latlon = (highlight_row['Lat'], highlight_row['Long'])

                route1 = [factory_latlon, dest_latlon, highlight_latlon, factory_latlon]
                d1 = [get_osrm_route(route1[i], route1[i + 1])[1] for i in range(3)]
                dist1 = sum(d1)

                route2 = [factory_latlon, highlight_latlon, dest_latlon, factory_latlon]
                d2 = [get_osrm_route(route2[i], route2[i + 1])[1] for i in range(3)]
                dist2 = sum(d2)

                final_route = route1 if dist1 <= dist2 else route2
                total_distance_km = min(dist1, dist2)
                route_order = f"‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‚ûù **{selected_name}** ‚ûù **{highlight_name}** " if dist1 <= dist2 else f"‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‚ûù **{highlight_name}** ‚ûù **{selected_name}**"

                for i in range(len(final_route) - 1):
                    coords, _ = get_osrm_route(final_route[i], final_route[i + 1])
                    folium.PolyLine(
                        coords,
                        color=['orange', 'green', 'blue'][i],
                        weight=4,
                        dash_array='5,5' if final_route[i + 1] == factory_latlon else None
                    ).add_to(m)
                    bounds.append(final_route[i + 1])

                                       # ‡∏ï‡∏±‡∏î factory ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                final_route_on_map = final_route[:-1]

                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå Google Maps ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ
                waypoints = "/".join([f"{lat},{lon}" for lat, lon in final_route_on_map])
                maps_url = f"https://www.google.com/maps/dir/{waypoints}"

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                st.markdown(f"[üìç ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Google Maps ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞]({maps_url})", unsafe_allow_html=True)

            else:
                coords1, d1 = get_osrm_route(factory_latlon, dest_latlon)
                coords2, d2 = get_osrm_route(dest_latlon, factory_latlon)
                dist1 = d1
                dist2 = d2
                total_distance_km = d1 + d2
                folium.PolyLine(coords1, color='orange', weight=4).add_to(m)
                folium.PolyLine(coords2, color='blue', weight=4, dash_array='5,5').add_to(m)
                bounds.extend([dest_latlon, factory_latlon])

            m.fit_bounds(bounds)
            return m, nearest_df[['Name', 'Class', 'Distance_km']], total_distance_km

        else:
            class_color_map = {
                "KAM": "darkred", "Diamond": "red", "Titanium": "lightred", "Platinum": "orange",
                "Gold": "darkblue", "Silver": "purple", "Bronze": "lightblue", "Zinc": "gray", "SUB-CONTRACTOR": "gray"
            }
            for _, row in df.iterrows():
                latlon = [row['Lat'], row['Long']]
                color = class_color_map.get(row['Class'], 'gray')
                folium.Marker(latlon,
                            popup=f"üìç {row['Name']}<br>Class: {row['Class']}",
                            icon=folium.Icon(color=color)).add_to(m)
                bounds.append(latlon)
            bounds.append(factory_latlon)
            m.fit_bounds(bounds)
            return m, pd.DataFrame(columns=['Name', 'Class', 'Distance_km']), 0

    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á..."):
        m, nearest_df, total_distance_km = plot_map(selected_name, tile_option)

    with col2:
        if not nearest_df.empty:
            st.subheader("üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á")
            st.markdown("""‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: <br>
            <span style='color: orange;'> ‚îÄ‚îÄ‚îÄ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‚ûù ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</span><br>
            <span style='color: green;'> ‚îÄ‚îÄ‚îÄ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å ‚ûù ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡πà‡∏ß‡∏á</span><br>
            <span style='color: blue;'> ‚ãØ‚ãØ‚ãØ ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô</span>
            """, unsafe_allow_html=True)
            nearest_df_display = nearest_df[['Name', 'Class']].reset_index(drop=True)
            nearest_df_display.index += 1
            st.dataframe(nearest_df_display, use_container_width=True, hide_index=True, height=150)

            highlight_name = st.selectbox("üîé ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á",
                                        ['--'] + nearest_df_display['Name'].tolist())
            if highlight_name == '--':
                highlight_name = None

    with col1:
        st.markdown("üîµ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‚ÄÉüî¥ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‚ÄÉüü¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‚ÄÉüîò ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÜ", unsafe_allow_html=True)
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á..."):
            m, _, total_distance_km = plot_map(selected_name, tile_option, nearby_highlight=highlight_name)
        st_folium(m, use_container_width=True, height=770)

    with col2:
        if selected_name and total_distance_km > 0:
            if route_order:
                st.info(f" **‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**: {route_order}")
            st.success(f"üöö ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{total_distance_km:.2f} km**")

# -------------------------------------------------------------------------------------------------------- ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ---------------- #
elif page == "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤":
    st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

    df = pd.read_csv(DATA_PATH)

    # ------------------------------------------------------------------------------------------ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå ----------------------------------------------
    sub_industry_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["Sub industry"].unique())
    class_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["Class"].unique())
    cus_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["Name"].unique())
    col1, col2 = st.columns(2)
    with col1:
        selected_sub = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sub industry", sub_industry_options)
    with col2:
        selected_class = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Class", class_options)

    selected_cus = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Customer", cus_options)

    # ------------------------------------------------------ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå ---------------------------------
    df_filtered = df.copy()
    if selected_sub != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        df_filtered = df_filtered[df_filtered["Sub industry"] == selected_sub]
    if selected_class != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        df_filtered = df_filtered[df_filtered["Class"] == selected_class]
    if selected_cus != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        df_filtered = df_filtered[df_filtered["Name"] == selected_cus]

    # ----------------------------------------------------------------- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á Class
    from pandas.api.types import CategoricalDtype
    class_order = ["KAM", "Diamond", "Titanium", "Platinum", "Gold", "Silver", "Bronze", "Zinc", "SUB-CONTRACTOR"]
    cat_type = CategoricalDtype(categories=class_order, ordered=True)
    df_filtered["Class"] = df_filtered["Class"].astype(cat_type)
    df_filtered = df_filtered.sort_values(by=["Class", "Name"])  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á Name ‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÅ‡∏ó‡∏ô "‡∏•‡∏≥‡∏î‡∏±‡∏ö"

    #  ‡πÉ‡∏™‡πà‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
    df_filtered = df_filtered.reset_index(drop=True)
    if "‡∏•‡∏≥‡∏î‡∏±‡∏ö" not in df_filtered.columns:
        df_filtered.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(df_filtered)+1))
    df_filtered = df_filtered.reset_index(drop=True)  # ‡∏•‡πâ‡∏≤‡∏á index ‡πÄ‡∏î‡∏¥‡∏°
    df_filtered["‡∏•‡∏≥‡∏î‡∏±‡∏ö"] = df_filtered.index + 1      # ‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå Google Maps
    df_filtered["Google Maps"] = df_filtered.apply(
        lambda row: f'<a href="https://www.google.com/maps?q={row["Lat"]},{row["Long"]}"     target="_blank">üåê</a>',
        axis=1
    )

    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á
    st.markdown("""
        <style>
        table {
            width: 100%;
            text-align: center !important;
        }
        th, td {
            text-align: center !important;
            vertical-align: middle !important;
        }
        </style>
    """, unsafe_allow_html=True)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö HTML ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ
    st.markdown(
        df_filtered[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "Sub industry", "Customer ID", "Name", "Class", "Lat", "Long",     "Google Maps"]]
        .to_html(escape=False, index=False),
        unsafe_allow_html=True
    )

    st.markdown("## ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

    # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
    edited_df = st.data_editor(
        df_filtered,
        use_container_width=True,
        num_rows="dynamic",
        key="editable_table"
    )

# ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"):
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        edited_df.to_csv(DATA_PATH, index=False)
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        st.cache_data.clear()  # ‡∏•‡πâ‡∏≤‡∏á cache ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

   
